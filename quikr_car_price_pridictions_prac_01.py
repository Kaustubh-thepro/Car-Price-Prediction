# -*- coding: utf-8 -*-
"""Quikr Car Price Pridictions Prac 01

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CRZHl9PYUDImyPxrbqjrrXS0uFLb_zLP
"""

import pandas as pd

df = pd.read_csv('quikr_car.csv')
df.head()

df.shape

df.info()

df['year'].unique()

df['Price'].unique()

df['kms_driven'].unique()

df['fuel_type'].unique()

"""Problem with Data

*   Year has some garbage values too
*   Year is in object not integer


*   Price has - Ask for price
*   Price is in object cnvt int

*   Kms driven has kms with int
*   Kms is in object cnvt int
*   Kms has nan values

*   Fuel type has nan values


*   name has both categorical and numeric value . So keep only first 3 words

# **Cleaning**
"""

df = df[df['year'].astype(str).str.isnumeric()]
df.head()

df['year'].unique()

df['year'] = df['year'].astype(int)
df.info()

df = df[df['Price'] != 'Ask For Price']
print(df.head())

df['Price'].unique()

df['Price'] = df['Price'].str.replace(',', '')
print(df.head())

df['Price'] = df['Price'].astype(int)
df.info()

df['kms_driven'] = df['kms_driven'].str.replace(',', '').str.replace(' kms', '')
print(df.head())

df['kms_driven'].unique()

df = df[df['kms_driven'] != 'Petrol'].copy()
print(df.head())

df['kms_driven'].unique()

df['kms_driven']=df['kms_driven'].astype(int)
df.info()

df.dropna(subset=['fuel_type'], inplace=True)
df.info()

df['fuel_type'].unique()

df['name'] = df['name'].str.split().str.slice(0, 3).str.join(' ')
print(df.head())

df.reset_index(drop=True, inplace=True)
df.head()

df.describe()

# by observing max value price has one outlier 8.5 lakh we need to remove it

df = df[df['Price'] < 6e6].copy().reset_index(drop=True)
df.head()

# save cleaned data in a new csv
df.to_csv('cleaned_car.csv')

"""# Model"""

x = df.drop(columns='Price')
y = df['Price']

x

y

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline

ohe = OneHotEncoder(handle_unknown='ignore')
ohe.fit(x[['name', 'company', 'fuel_type']])

column_trans = make_column_transformer((OneHotEncoder(categories=ohe.categories_), ['name', 'company', 'fuel_type']),
                                       remainder='passthrough')

lr = LinearRegression()

pipe = make_pipeline(column_trans, lr)

pipe.fit(x_train, y_train)

y_pred = pipe.predict(x_test)

r2_score(y_test, y_pred)

scores=[]
for i in range(1000):
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=i)
  lr = LinearRegression()
  pipe = make_pipeline(column_trans, lr)
  pipe.fit(x_train, y_train)
  y_pred = pipe.predict(x_test)
  scores.append(r2_score(y_test, y_pred))

import numpy as np
np.argmax(scores)

scores[np.argmax(scores)]

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=np.argmax(scores))
lr = LinearRegression()
pipe = make_pipeline(column_trans, lr)
pipe.fit(x_train, y_train)
y_pred = pipe.predict(x_test)
r2_score(y_test, y_pred)

import pickle
pickle.dump(pipe, open('LinearRegressionModel.pkl', 'wb'))

pipe.predict(pd.DataFrame([['Maruti Suzuki Swift', 'Maruti', 2019, 100, 'Petrol']], columns=['name', 'company', 'year', 'kms_driven', 'fuel_type']))

